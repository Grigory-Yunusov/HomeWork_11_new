

Дуже важливе Завдання для тебе:
за краще рішення отримаєш чайові - 200$

У нас є готова програма, написана на мові ООП Python. Ця програма призначена для запису та збереження даних у AddressBook у файлі .pkl, включаючи ім'я, номер телефону, дату народження, адресу та електронну пошту. Крім того, є додаткові функції, такі як нотатки, функціонал для обчислення залишкових днів до дня народження, сортувальник файлів і т.д. Весь цей код розташований у файлі main.py, в дерикторії проекту

Ваше завдання полягає в  написанні додаткового скрипта(Створення Аккаунту) «user.py», який буде:

1. Реєструвати аккаунт користувача по:

    1. name(може бути ім'я та прізвище, або тільки ім'я на, розсуд користувача). Додайте корекцію для імені та прізвища (capitalize),strip(), та обробку помилок, якщо користувач вводить символи або цифри замість букв - [А-Я а-я A-Z a-z].
    2. username  (може містити будь-які символи). але викликати помилку і повідомлення про неї, якщо користувач ввів 1 пробіл і натиснув enter! username має бути унікальним, не повинен повинен повторюватись! 
    3. password (повинен складатися із, мінімум 10 символів, обов'язково повинен містити хоча б одну літеру верхнього регістру, принаймні одну цифру, та  без спеціальних символів - лише нижнє підкреслення(за бажанням)).
    4. Електронна пошта.
2. Авторизувати користувача по username користувача та паролю. Після авторизації користувач отримує доступ до свого особистого файлу бази даних у форматі .pkl та може вносити зміни за допомогою вже написаного скрипта main.py.

3. Самостійно створювати особистий файл з даними під час реєстрації. Назва файлу генерується на основі username користувача.

4. Надавати користувачеві доступ до вже готової програми, також написаної на мові Python, у файлі main.py.

Додаткові, обов'язкові завдання:
1. напиши скріпт застосовуючи, обов'язково, принципи SOLID, продумуючи на перед, на випадок якщо потрібно буде розширити додаток. принципи SOLID ОБОВЯЗКОВО. наприклад: Абстрактний базовий клас (ABC) View, із визначеним абстрактним методом render, для створення різних видів інтерфейсів користувача (UI), які можуть бути використані контролером без необхідності змінювати його код.
2. кожна команда повинна мати обробку помилок на рахунок, якщо користувач введе щось некоректно(повідомлення мають виводитись українською мовою)
3. программа не повинна "падати" якщо користувач ввів щось не так - пробіл замість тексту (використовуй блок try)
4. данні про користувачів зберігаються в окремому файла (може зашифрованому файлі)
5. обов'язково добавляй всі імпорти включно з main.py pathlib
6. впроваджуй бібліотеки prompt_toolkit.validation import Validator, ValidationError
from rich. або інші, для цікавого красивого інтерфейсу
7. при необхідності використовуй декораторі   @property   @value.setter
8. обов'язкова детальна  документація коду,  """ в такому форматі"""
9. обов'язковo додати Функціонал підказок існуючих команд, з натисканням першої літери:

Приблизна структура коду user.py:
console = Console()
COMMANDS = {...}
class Field:(основна логіка)
    def __init__(self, value):
        self._value = None
        self.value = value
class Record:
class :Account():
class User:
class Controller:
   def do_add_user (Реєстрація)
   def do_enter (Авторизація - вхід до персональної бази данних)
class View:
class ConsoleView(View):
class Name
class UserName
class Pasword
class CommandValidator(Validator):
    def handle_command(controller, command):
def main():
if __name__ == "__main__":
    main()
P.s. СКРИПТ МАЄ БУТИ ПОВНІСТЮ ГОТОВИМ І САМОДОСТАТНІМ. Це дуже важливе завдання приклади максимум зусиль, віднесись відповідально зроби все найкращим способом, детально прораховуй кожен крок!!! Також пропонуй декілька альтернативних варіантів